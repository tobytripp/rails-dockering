* Experimenting with getting Rails running on Docker

Work in progress.

** Configuration

   The containers are configured by three components:

   1. The [[./docker/Vagrantfile][vagrant configuration]] for the VM that hosts the [[http://www.docker.com][docker]]
      daemon.  This configuration is referenced by:
   2. the [[./Vagrantfile][vagrant configuration]] for the individual containers.  These
      build the container using:
   3. the [[./Dockerfile][docker configuration]] for the Rails container itself.

* Running Things

  The [[http://www.docker.com][Docker]][2] containers are boot-strapped with [[http://www.vangrantup.com][Vagrant]][1].  Start them in
  the usual way:

  #+BEGIN_SRC sh
  vagrant up
  #+END_SRC

  Start just the Rails container with:

  #+BEGIN_SRC sh
  vagrant up rails
  #+END_SRC

  With that started, the Rails application should be available at
  [[http://localhost:3000][localhost:3000]]

** Port Forwarding

   Currently Vagrant will warn you that any ports you need forwarded
   will not be on the docker host VM[3] (if you're using one).  So,
   you'll need to set those yourself.  I set up forwarding for the
   Rails development server by overriding the default boot2docker VM
   configuration and adding my port-forwards there.  See
   [[./docker/Vagrantfile][docker/Vagrantfile]]

   It's likely a good idea to start this vm up before you start the
   docker images.  Some say that there is a race condition.

   Note also that the [[http://boot2docker.io][boot2docker]][4] image runs in RAM and therefore
   doesn't persist its filesystem across reboots.  Switch to another
   docker host OS if this bothers you.  There's a [[./docker/Vagrantfile.ubuntu][Vagrantfile]] included
   for that already.

   Port forwards are also required by the containers themselves.
   These forward ports from the docker host VM to the processes within
   the containers.

   Note also that, since requests to the server come from outside the
   container, you must specify a bind address for the rails server
   process.  As of version 4 Rails defaults to localhost and won't get
   your requests.

** Connecting to the docker host

   On hosts that don't support Docker natively, Vagrant will
   automatically set up a boot2docker VM for you.  If you want to
   connect to this host for some reason, first you need to get its
   Vagrant ID:

   #+BEGIN_SRC sh
   vagrant global-status
   #+END_SRC

   #+BEGIN_SRC fundamental
   id       name       provider   state    directory
   --------------------------------------------------------------------------------
   0f27b5d  default    virtualbox running  /Users/toby/Code/Ruby/docker-test/docker
   194646a  db         docker     running  /Users/toby/Code/Ruby/docker-test
   425456d  ruby       docker     running  /Users/toby/Code/Ruby/docker-test
   #+END_SRC

   Above, "default" is the name of our docker host.  With that we can
   do things like ssh into the virtual machine:

   #+BEGIN_SRC sh
   vagrant ssh 0f27b5d
   #+END_SRC

** Running Commands in the Container

   Something went wrong, I need to poke around in the Rails container:

   #+BEGIN_SRC sh
   vagrant docker-run ruby -t -- /bin/bash
   #+END_SRC

   Start a rails console in the container:

   #+BEGIN_SRC sh
   vagrant docker-run ruby -t -- rails console
   #+END_SRC

** I've Made Changesâ€¦

   Reload the container:

   #+BEGIN_SRC sh
   vagrant reload ruby
   #+END_SRC

** Logs

   All logs:

   #+BEGIN_SRC sh
   vagrant docker-logs
   #+END_SRC

   =tail= just the rails logs:

   #+BEGIN_SRC sh
   vagrant docker-logs ruby --follow
   #+END_SRC

* TODO Deploying the Container

* Interacting with Docker Directly

  Once you've ssh'd into the docker host, you can interact with the
  docker containers directly.

  List running containers:
  #+BEGIN_SRC sh
    $ docker ps
    CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS                    NAMES
    956474a40697        49b4af74a5d0        "bundle exec rails s   49 minutes ago      Up 49 minutes       0.0.0.0:3000->3000/tcp   rails
  #+END_SRC

  List all containers by adding =-a=.

  Start, stop, or remove a container:
  #+BEGIN_SRC sh
    $ docker stop rails
    rails
    $ docker start rails
    rails
    $ docker stop 956474a40697
    956474a40697
    $ docker rm rails
    rails
  #+END_SRC

  List images (containers are started from images):
  #+BEGIN_SRC sh
    $ docker images
    REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
    <none>              <none>              49b4af74a5d0        54 minutes ago      850.9 MB
    <none>              <none>              16b3f1db5f01        About an hour ago   850.9 MB
    ruby                2.2                 f0f149c3d6f7        9 days ago          777.5 MB
  #+END_SRC

  Remove an image:
  #+BEGIN_SRC sh
  $ docker rmi 16b3f1db5f01
  #+END_SRC

  Start a new container from an existing image:
  #+BEGIN_SRC sh
  $ docker run --name rails-1 -p 3000:3000 -it 16b3f1db5f01
  #+END_SRC

  Build a new image from a path including a Docker-file:
  #+BEGIN_SRC sh
  $ docker build -t rails-image-1 .
  #+END_SRC
  
* Linking the Web Application to the Database

  The link attribute will share a number of environment variables from the database container back 
  through the link.  For our purposes, this includes:

  #+BEGIN_SRC sh
  $ env | grep -i db
  DB_ENV_POSTGRES_USER=development
  DB_ENV_POSTGRES_PASSWORD=730423d151b65e5e
  DB_PORT_5432_TCP_ADDR=172.17.0.2
  #+END_SRC
  
  So, you can reference these environment variables in the Rails =database.yml=.
  
* Resources

[1] [[www.vagrantup.com][Vagrant]]

[2] [[http://www.docker.com][Docker]]

[3] [[https://github.com/mitchellh/vagrant/issues/3728][Vagrant, boot2docker, and port-forwarding]]

  * [[https://gist.github.com/audionerd/d7d77d9af080a7a87d9b][How to get around it]]
  * [[http://www.maori.geek.nz/post/vagrant_with_docker_how_to_set_up_postgres_elasticsearch_and_redis_on_mac_os_x][Vagrant with Docker: How to set up Postgres, Elasticsearch and Redis on Mac OS X]]
  * [[https://github.com/seapy/dockerfiles/blob/master/rails-nginx-unicorn/Dockerfile][Another example]]
  * [[https://github.com/mitchellh/vagrant/pull/3347][Vagrant Docker Provider]]

[4] [[http://boot2docker.io][boot2docker]]

[5] [[https://www.digitalocean.com/community/tutorials/docker-explained-how-to-containerize-and-use-nginx-as-a-proxy][Digital Ocean's Docker Tutorial]]
